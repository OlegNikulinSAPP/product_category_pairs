import os
import sys
from pyspark.sql import SparkSession, DataFrame
from pyspark.sql.types import StructType, StructField, StringType, IntegerType
from pyspark.sql.functions import col


def setup_spark_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Spark –¥–ª—è Windows"""
    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    for key in ['PYSPARK_PYTHON', 'PYSPARK_DRIVER_PYTHON', 'HADOOP_HOME']:
        if key in os.environ:
            del os.environ[key]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Python
    os.environ['PYSPARK_PYTHON'] = sys.executable
    os.environ['PYSPARK_DRIVER_PYTHON'] = sys.executable


def create_spark_session():
    """–°–æ–∑–¥–∞–Ω–∏–µ SparkSession —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    return SparkSession.builder \
        .appName("ProductCategoryApp") \
        .master("local[1]") \
        .config("spark.driver.bindAddress", "127.0.0.1") \
        .config("spark.driver.host", "127.0.0.1") \
        .config("spark.sql.adaptive.enabled", "false") \
        .config("spark.sql.adaptive.coalescePartitions.enabled", "false") \
        .config("spark.serializer", "org.apache.spark.serializer.KryoSerializer") \
        .getOrCreate()


def get_product_category_pairs(
        products: DataFrame,
        categories: DataFrame,
        product_category_links: DataFrame
) -> DataFrame:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã ¬´–ò–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äì –ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –∏ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        products: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['product_id', 'product_name']
        categories: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['category_id', 'category_name']
        product_category_links: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['product_id', 'category_id']

    Returns:
        –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['product_name', 'category_name']
    """
    # –í—Å–µ –ø–∞—Ä—ã –ø—Ä–æ–¥—É–∫—Ç-–∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–µ—Ä–µ–∑ –ª–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    product_categories = (
        products
        .join(product_category_links, "product_id", "left")  # LEFT JOIN —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        .join(categories, "category_id", "left")  # LEFT JOIN —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        .select(
            col("product_name"),
            col("category_name")
        )
    )

    return product_categories


 
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    setup_spark_environment()

    try:
        spark = create_spark_session()
        spark.sparkContext.setLogLevel("ERROR")

        print("üöÄ –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ò get_product_category_pairs")
        print("=" * 60)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        products_data = [
            (1, "Laptop"),
            (2, "Mouse"),
            (3, "Keyboard"),  # –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            (4, "Monitor"),  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            (5, "Webcam")  # –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        ]

        categories_data = [
            (1, "Electronics"),
            (2, "Accessories"),
            (3, "Office Equipment")
        ]

        links_data = [
            (1, 1),  # Laptop -> Electronics
            (2, 2),  # Mouse -> Accessories
            (4, 1),  # Monitor -> Electronics
            (4, 3)  # Monitor -> Office Equipment
        ]

        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã
        products_schema = StructType([
            StructField("product_id", IntegerType(), True),
            StructField("product_name", StringType(), True)
        ])
        products_df = spark.createDataFrame(products_data, products_schema)

        categories_schema = StructType([
            StructField("category_id", IntegerType(), True),
            StructField("category_name", StringType(), True)
        ])
        categories_df = spark.createDataFrame(categories_data, categories_schema)

        links_schema = StructType([
            StructField("product_id", IntegerType(), True),
            StructField("category_id", IntegerType(), True)
        ])
        links_df = spark.createDataFrame(links_data, links_schema)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
        print("\n--- –ü–†–û–î–£–ö–¢–´ ---")
        products_df.show()

        print("\n--- –ö–ê–¢–ï–ì–û–†–ò–ò ---")
        categories_df.show()

        print("\n--- –°–í–Ø–ó–ò ---")
        links_df.show()

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
        print("\nüîß –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò get_product_category_pairs...")
        result_df = get_product_category_pairs(products_df, categories_df, links_df)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        result_df.show()

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = result_df.collect()

        print("\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        total_pairs = len(results)
        products_with_categories = len([r for r in results if r['category_name'] is not None])
        products_without_categories = len([r for r in results if r['category_name'] is None])

        print(f"‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä: {total_pairs}")
        print(f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {products_with_categories}")
        print(f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {products_without_categories}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if products_without_categories > 0:
            print("\n‚ö†Ô∏è  –ü–†–û–î–£–ö–¢–´ –ë–ï–ó –ö–ê–¢–ï–ì–û–†–ò–ô:")
            for row in results:
                if row['category_name'] is None:
                    print(f"   - {row['product_name']}")

        print("\n" + "=" * 60)
        print("‚úÖ –ü–†–ò–ú–ï–† –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")

        spark.stop()

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    main()